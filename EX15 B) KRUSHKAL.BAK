//EX15B)  KRUSHKAL'S

#include<iostream.h>
#include<conio.h>
//#include<limits.h>
int v;
int parent[10];
int cost[20][20];
int find(int i)
{
 while(parent[i]!=i)
   i=parent[i];
 return i;
}

void Union(int i,int j)
{
 int a=find(i);
 int b=find(j);
 parent[a]=b;
}
void krushkal()
{
 int edge_count=0;    //MST no of edges=n-1
 int min;
 int a,b;
 int total_cost=0;
 for(int i=0;i<v;i++)
  parent[i]=i;
 while(edge_count<v-1)
 {
  min=999;
  a=-1;
  b=-1;
  for(int i=0;i<v;i++)
  {
   for(int j=0;j<v;j++)
   {
    if(find(i)!=find(j) && cost[i][j]<min)
    {
     min=cost[i][j];
     a=i;
     b=j;
    }
   }
  }
  Union(a,b);
  cout<<"\nEDGE:"<<edge_count<<" "<<"("<<a<<","<<b<<")"<<"  COST="<<min;
  edge_count++;
  total_cost+=min;
 }
 cout<<"\nTOTAL COST="<<total_cost;
}

void main()
{
 clrscr();
 int i,j;

 cout<<"\nENTER THE NO OF VERTICES: ";
 cin>>v;
 cout<<"\nENTER THE COST MATRIX: ";
 for(i=0;i<v;i++)
 {
  for(int j=0;j<v;j++)
   cin>>cost[i][j];
  }
  krushkal();
 getch();
}


/*

ENTER THE NO OF VERTICES: 5                                                     
                                                                                
ENTER THE COST MATRIX:                                                          
999 10 5 999 2                                                                  
10 999 3 1 999                                                                  
5 3 999 9 2                                                                     
999 1 9 999 6                                                                   
2 999 2 6 999                                                                   
                                                                                
EDGE:0 (1,3)  COST=1                                                            
EDGE:1 (0,4)  COST=2                                                            
EDGE:2 (2,4)  COST=2                                                            
EDGE:3 (1,2)  COST=3                                                            
TOTAL COST=8                                                                    
			   */
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
